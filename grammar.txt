INITIAL DRAFT VERSION V0.1 (Simplified)
---------------------------------------

prog = { decl }.

decl = "int" IDENTIFIER ";" | assignment.

stmt = "if" "(" expr ")" "do" stmt [ "else" stmt ] "end" | "while" "(" expr ")" "do" stmt "end" | "return" [ expr ] | assignment.

assignment = IDENTIFIER "=" expr ";".

expr = factor { ( "*" | "/" | "+" | "-" ) factor } [ ( "<" | ">" | ">=" | "<=" | "==" | "!=" ) factor { ( "*" | "/" | "+" | "-" ) factor } ].

factor = NUMBER | IDENTIFIER | IDENTIFIER "[" NUMBER "]" | ( OPERATION | IDENTIFIER ) "(" [ ( IDENTIFIER | NUMBER ) { "," ( IDENTIFIER | NUMBER ) } ] ")" | "("expr ")".

SECOND DRAFT VERSION V1.0 (Complete Language)
---------------------------------------------

program = { external_decl }.

external_decl = (INT|VOID) IDENTIFIER [ "=" ( expr ) ] ";" | (INT|VOID) IDENTIFIER "[" NUMBER "]" [ "=" "{" NUMBER { "," NUMBER } "}" ] ";" | (INT|VOID) ( OPERATION | IDENTIFIER ) "(" [ (INT|VOID) IDENTIFIER { "," (INT|VOID) IDENTIFIER } ] ")" "do" compound_stmt "end".

decl = (INT|VOID) IDENTIFIER [ "=" ( expr ) ] ";" | (INT|VOID) IDENTIFIER "[" NUMBER "]" [ "=" "{" NUMBER { "," NUMBER } "}" ] ";".

compound_stmt = {decl} {stmt}.

stmt = "if" "(" expr ")" "do" compound_stmt [ "else" compound_stmt ] "end" | "while" "(" expr ")" "do" compound_stmt "end" | "return" [ expr ] ";" | expr ";" | (print|scan) "(" expr ")" ";".

expr = factor { ( "*" | "/" | "+" | "-" ) factor } [ ( "<" | ">" | ">=" | "<=" | "==" | "!=" ) factor { ( "*" | "/" | "+" | "-" ) factor } ] | factor "=" expr.

factor = NUMBER | IDENTIFIER | IDENTIFIER "[" NUMBER "]" | ( OPERATION | IDENTIFIER ) "(" [ expr { "," expr } ] ")" | "("expr ")".

LEXER (TOKENS)
--------------


*token = ( "+" | "-" | "*" [ "*" ] | "/" | "%" | "&" [ "&" ] | "|" [ "|" ] | "^" | "<" "<" | ">" ">" ) [ "=" ] | ( "," | ";" | ":" [ ":" ] | "." [ "." [ "." ] ] | "|" | "^" | "&" | "<" "=" ">" | "=" ">" | "-" ">" | ( "=" | "!" ) "~" ) | ( "!" | "=" [ "=" ] | ">" | "<" ) [ "=" ] | ( "+" | "-" | "*" [ "*" ] | "/" | "%" ) | ( "<" "<" | ">" ">" | "~" | "[" | "]" | "(" | ")" | "{" | "}" ) | "+" "+" | "-" "-" | [ "$" ] ( "_" | letter ) { "_" | letter | digit } [ "!" | "?" ] | """ { any_char } """ | "'" { any_char } "'" | digit { digit } [ "." digit { digit } ].

letter = 'a' | 'b' | .. | 'z' | 'A' | 'B' | .. | 'Z'.
digit = '0' | '1' | .. | '9'.
any_char = any printable ASCII character (excluding control character).

* reduced version


LEXER (TOKENS)
--------------

operators = "+" | "-" | "*" | "**" | "/" | "%" | "&" | "&&" | "|" | "||"  | "<<" | ">>"
assign_operators = operators "=".
unary_operators = "^" | ":" | "::" | "->" | "++" | "--".
delimiters = "," | ";" | "." | ".." | "..." | "=>" | "(" | ")" | "{" | "}" | "[" | "]".
logic_operators = "=~" | "!~" | "<=>" | ">" | "<" | ">=" | "<=" | "==" | "!=" | "==="
string = "'" any_char "'" | """ any_char """
identifier = "$" ( "_" | letter ) { ( "_" | letter | digit ) } [ "!" | "?" ].
number = digit { digit [ "." { digit } ] }.